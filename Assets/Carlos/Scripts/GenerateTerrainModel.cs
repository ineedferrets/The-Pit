using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GenerateTerrainModel 
{
    [RealtimeProperty(1, true, true)]
    private bool _generationStarted;

    [RealtimeProperty(2, true, true)]
    private bool _generationCompleted;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class GenerateTerrainModel : RealtimeModel {
    public bool generationStarted {
        get {
            return _cache.LookForValueInCache(_generationStarted, entry => entry.generationStartedSet, entry => entry.generationStarted);
        }
        set {
            if (this.generationStarted == value) return;
            _cache.UpdateLocalCache(entry => { entry.generationStartedSet = true; entry.generationStarted = value; return entry; });
            InvalidateReliableLength();
            FireGenerationStartedDidChange(value);
        }
    }
    
    public bool generationCompleted {
        get {
            return _cache.LookForValueInCache(_generationCompleted, entry => entry.generationCompletedSet, entry => entry.generationCompleted);
        }
        set {
            if (this.generationCompleted == value) return;
            _cache.UpdateLocalCache(entry => { entry.generationCompletedSet = true; entry.generationCompleted = value; return entry; });
            InvalidateReliableLength();
            FireGenerationCompletedDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GenerateTerrainModel model, T value);
    public event PropertyChangedHandler<bool> generationStartedDidChange;
    public event PropertyChangedHandler<bool> generationCompletedDidChange;
    
    private struct LocalCacheEntry {
        public bool generationStartedSet;
        public bool generationStarted;
        public bool generationCompletedSet;
        public bool generationCompleted;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        GenerationStarted = 1,
        GenerationCompleted = 2,
    }
    
    public GenerateTerrainModel() : this(null) {
    }
    
    public GenerateTerrainModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireGenerationStartedDidChange(bool value) {
        try {
            generationStartedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGenerationCompletedDidChange(bool value) {
        try {
            generationCompletedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GenerationStarted, _generationStarted ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.GenerationCompleted, _generationCompleted ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.generationStartedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GenerationStarted, entry.generationStarted ? 1u : 0u);
            }
            if (entry.generationCompletedSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.GenerationCompleted, entry.generationCompleted ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.GenerationStarted, _generationStarted ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.GenerationCompleted, _generationCompleted ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.generationStartedSet || entry.generationCompletedSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.generationStartedSet) {
                stream.WriteVarint32((uint)PropertyID.GenerationStarted, entry.generationStarted ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.generationCompletedSet) {
                stream.WriteVarint32((uint)PropertyID.GenerationCompleted, entry.generationCompleted ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.GenerationStarted: {
                    bool previousValue = _generationStarted;
                    _generationStarted = (stream.ReadVarint32() != 0);
                    bool generationStartedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.generationStartedSet);
                    if (!generationStartedExistsInChangeCache && _generationStarted != previousValue) {
                        FireGenerationStartedDidChange(_generationStarted);
                    }
                    break;
                }
                case (uint)PropertyID.GenerationCompleted: {
                    bool previousValue = _generationCompleted;
                    _generationCompleted = (stream.ReadVarint32() != 0);
                    bool generationCompletedExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.generationCompletedSet);
                    if (!generationCompletedExistsInChangeCache && _generationCompleted != previousValue) {
                        FireGenerationCompletedDidChange(_generationCompleted);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _generationStarted = generationStarted;
        _generationCompleted = generationCompleted;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
